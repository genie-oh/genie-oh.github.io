{"pages":[{"title":"About Me","text":"/* Variables */ /* Fonts */ /* Styling */ .custom-timeline { margin: 4em auto; position: relative; max-width: 46em; } .custom-timeline:before { background-color: black; content: ''; margin-left: -3px; position: absolute; top: 0; left: 32px; width: 2px; height: 100%; } .custom-timeline-event { position: relative; } .custom-timeline-event:hover .custom-timeline-event-icon { -moz-transform: rotate(-45deg); -ms-transform: rotate(-45deg); -webkit-transform: rotate(-45deg); transform: rotate(-45deg); background-color: #a83279; } .custom-timeline-event:hover .custom-timeline-event-thumbnail { -moz-box-shadow: inset 40em 0 0 0 #a83279; -webkit-box-shadow: inset 40em 0 0 0 #a83279; box-shadow: inset 40em 0 0 0 #a83279; } .custom-timeline-event-copy { padding: 2em; padding-bottom: 0; padding-left: 0; position: relative; top: -1.875em; left: 4em; width: 80%; } .custom-timeline-event-copy h3 { font-size: 1.75em; } .custom-timeline-event-copy h4 { font-size: 1.2em; margin-bottom: 1.2em; } .custom-timeline-event-copy strong { font-weight: 700; } .custom-timeline-event-copy p:not(.custom-timeline-event-thumbnail) { padding-bottom: 1.2em; } .custom-timeline-event-icon { -moz-transition: -moz-transform 0.2s ease-in; -o-transition: -o-transform 0.2s ease-in; -webkit-transition: -webkit-transform 0.2s ease-in; transition: transform 0.2s ease-in; -moz-transform: rotate(45deg); -ms-transform: rotate(45deg); -webkit-transform: rotate(45deg); transform: rotate(45deg); background-color: black; outline: 10px solid white; display: block; margin: 0.5em 0.5em 0.5em -0.5em; position: absolute; top: 0; left: 2em; width: 1em; height: 1em; } .custom-timeline-event-thumbnail { -moz-transition: box-shadow 0.5s ease-in 0.1s; -o-transition: box-shadow 0.5s ease-in 0.1s; -webkit-transition: box-shadow 0.5s ease-in; -webkit-transition-delay: 0.1s; transition: box-shadow 0.5s ease-in 0.1s; color: white; font-size: 0.75em; background-color: black; -moz-box-shadow: inset 0 0 0 0em #ef795a; -webkit-box-shadow: inset 0 0 0 0em #ef795a; box-shadow: inset 0 0 0 0em #ef795a; display: inline-block; margin-bottom: 1.2em; width: 161px; margin-left: -32px; text-align: left; padding-left: 32px; } ul.custom-timeline { list-style: none; margin: 0; margin-bottom: 50px; } ul.custom-timeline .custom-timeline-event-copy div { margin-bottom: 1em; padding-bottom: 1.2em; } ul.custom-timeline h1 { border: 0 !important; padding: 0 !important; margin: 0 0 10px 0 !important; } Profile NickName genie-oh FullName Hyunjin. Oh Job Semi-Fullstack Web Engineer Lived in 2018 - now : Japan(Tokyo) 1986 - 2017 : Korea. rep(Seoul, Busan) Communication Languages Japanese : Business & Semi Native Level Korean : Naitve English : some Read & Write Contacts Twitter : @dev-genie_oh # Skills Main Engineering Skill Web Service Application Side Architecture Design Know-how about Payment Gateway Service Service Requirement Definition Data Modeling, UseCase Modeling Develop Back-end Application (PHP, PHP Framework) Do documentation of System Specification Sub Engineering Skill Develop Front-end Application (Typescript, React, Jquery, Vanilla Javascript) Markup Front-end (HTML, CSS, LESS, Bootstrap) Operation Skill on Linux. # Strong & Weak Strong Point (I Can provice talent) Application Side Architecture Design & Modeling Payment System Know-How Requirement Definition Documentation Develop Back-end Application Weak Point (is Studying...) Infrastructer Skill (AWS, Docker, Automation Deploy...) Human Resource Management on Projects Modern Programming Skills # Career # 2018.01 - now OZ-VISION. inc# Providing Point Income Services & Others(on Japan)# # Hapitas Comic Service Main Engineer (New Startup Business) Service Application Architecture Design(Requirement Definition, Database Modeling, Sitemap, Wireframe, Functional Specification) Lead development of core features (Payment feature, Contents access control) Hapitas Service Engineer Develop & Operate something on Hapitas Service(PC, SP, APP) Make Lecture programs for newcomer. (step by step small project) 2013.01 - 2017.01 Danal. inc# providing Payment Gateway Services(on Korea. rep)# # Payment Gateway Back-end Engneer Architecture Design of Payment Gateway System Do Documentation for Payment Gateway System Develop & Operate Payment Gateway Transaction Server Patent Lead do patent about end-point-encryption number input interface module on a website Lead develop & integration it to the real service system Past - 2012.12 Dongseo University(on Korea. rep / for 4 years)# specialize in Information Network of Computer Science#","link":"/about/me/index.html"}],"posts":[{"title":"ブログ開設しました！","text":"はじめまして！韓国出身で、現在は日本でウェブエンジニアとして努めさせて頂いている呉(オー)と申します。 プロフィールは以下のページに記載しておりますので、興味のお持ちの方はぜひご覧頂けると嬉しいです。 ● LINK : AboutMe Git Page、Hexo, Icarusテーマを利用して、ブログを開設してみました。 ウェブ・エンジニアリング全般から、アプリケーション設計、システム・エンジニアリング、サービス制作など、いろんな話を残していけばいいなとおもています。 まだ、いろいろ学んでいる身ではありますが、楽しくやって行きたいと思っています。何卒、宜しくお願い申し上げます。","link":"/2020/07/06/%E3%83%96%E3%83%AD%E3%82%B0%E9%96%8B%E8%A8%AD%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81/"},{"title":"Docker。自分がよく使うコマンドをaliasに設定「説明付き」","text":"はじめに#私が思うよく使うDockerコマンドは、bash_profileや、bash_rcでaliasに設定して使っています。 自分の誹謗録ようなものですが、興味のある方はお試しください。そして、もし有用なaliasを使っているならぜひ共有頂けると嬉しいです。 自分も勉強目的で書いているので、間違った情報があるかもしれません。そこはご指摘頂けるとありがたいです。 alias設定内容#~/.bash_profile#以下の構文を追加 123if [ -f ~/.myalias ]; then source ~/.myaliasfi ~/.myalias#● gisthttps://gist.github.com/genie-oh/d73a224e7cb3cffab2868182eb79ccad ※説明#al-dock#Docker関連aliasのリストを表示 12345678910111213141516171819202122$ al al-dockexecute : cat ~/.myalias | grep dock | sed \"s/=/ \\t\\= /\" # dockeralias al-dock = 'cat ~/.myalias | grep dock | sed \"s/=/ \\t\\= /\"'alias dock = 'docker'alias docki = 'docker images'alias dockps = 'docker ps -a'alias dockrrm = 'docker run --rm'alias dockeit = 'docker exec -it'alias dockrm = 'docker rm -f'alias dockrmi = 'docker rmi -f'alias dockrma = 'docker rm -f $(docker ps -aq)'alias dockrmia = 'docker rmi -f $(docker images -aq)'alias dockins = 'docker inspect'alias dockip = 'docker inspect --format=\"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\"'alias docklogs = 'dock logs --tail 50 --follow --timestamps'alias dockc = 'docker-compose'alias dockcb = 'docker-compose build'alias dockcu = 'docker-compose up -d'alias dockcd = 'docker-compose down'alias dockccl = 'grep container_name docker-compose.yml' dockc, dockcb, dockcu, dockcd#docker-compose関連docker-composeのbuild,up,down 1234alias dockc = 'docker-compose'alias dockcb = 'docker-compose build'alias dockcd = 'docker-compose down'alias dockcu = 'docker-compose up -d' dockccl#docker-compose.yml内のコンテナーネームのリストを出力 1alias dockccl = 'grep container_name docker-compose.yml' 123456$ al dockcclexecute : grep container_name docker-compose.yml container_name: lamp-web container_name: lamp-php...省略 docki#docker imageのリストを出力 1alias docki = 'docker images' 1234567$ al dockiexecute : docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEcentos 7 b5b4d78bc90c 8 weeks ago 203MBdocker-lamp-test_php latest e6d67d8f48cf 17 minutes ago 666MB...省略 dockps#dockerのコンテナーリストと実行状態を表示 1alias dockps = 'docker ps -a' 123456$ al dockpsexecute : docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES6116324251dd docker-lamp-test_php \"docker-php-entrypoi…\" 17 minutes ago Up 17 minutes 0.0.0.0:32769-&gt;9000/tcp lamp-php...省略 dockeit#実行中のコンテナーで、interactive&amp;ttyモードでコマンド実行docker exec –interective –tty 1alias dockeit = 'docker exec -it' 12345$ al dockeit lamp-php bashexecute : docker exec -it lamp-php bashroot@37bcdbd02f92:/var/www/html# lsconfig gulpfile.js home_root home_sub nodeapp dockrrm#コンテナーでコマンドを実行後、即時にコンテナーを終了するコンテナー作成▶コマンド実行▶コンテナー終了 1alias dockrrm = 'docker run --rm' 12345$ al dockrrm composer php -vexecute : docker run --rm composer php -vPHP 7.4.7 (cli) (built: Jun 11 2020 18:58:32) ( NTS )...省略 dockins#コンテナーの状態を確認 1alias dockins = 'docker inspect' 12345678$ al dockins lamp-phpexecute : docker inspect lamp-php[ { \"Id\": \"6116324251ddffc8090cc605d391f89a951aeb46d32636dd62476a225a894c51\", \"Created\": \"2020-07-01T13:30:27.11145Z\",...省略 dockip#コンテナーの状態で、IPだけを取得 1alias dockip = 'docker inspect --format=\"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\"' 1234$ al dockip lamp-phpexecute : docker inspect --format=\"{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\" lamp-php172.30.0.5 docklogs#コンテナーのログを確認 1alias docklogs = 'dock logs --tail 50 --follow --timestamps' 12345$ al docklogs lamp-phpexecute : docker logs --tail 50 --follow --timestamps lamp-php2020-07-01T13:30:28.338589500Z [01-Jul-2020 22:30:28] NOTICE: fpm is running, pid 12020-07-01T13:30:28.340324600Z [01-Jul-2020 22:30:28] NOTICE: ready to handle connections dockrm, dockrmi#特定のコンテナー、またはイメージを削除 12alias dockrm = 'docker rm -f'alias dockrmi = 'docker rmi -f' dockrma, dockrmia#すべてのコンテナー、またはイメージを削除 12alias dockrma = 'docker rm -f $(docker ps -aq)'alias dockrmia = 'docker rmi -f $(docker images -aq)'","link":"/2020/07/09/Docker%E3%80%82%E8%87%AA%E5%88%86%E3%81%8C%E3%82%88%E3%81%8F%E4%BD%BF%E3%81%86%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92alias%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%80%8C%E8%AA%AC%E6%98%8E%E4%BB%98%E3%81%8D%E3%80%8D/"},{"title":"Git Pages &amp; Hexoで手軽な無料Blogを作る","text":"1. はじめに#Git Pagesとhexoという静的ページジェネレーターで、設置型ブログを無料で作ることができます。 1) Git Pages &amp; 静的ページジェネレーターを使ったブログのメリット# サーバーいらず、DBいらず、サーバーサイド開発いらず、それなりにちゃんとした自分のブログを持てる お金がかからず、無制限トラフィックで、ウェブページを提供できる カスタマイズが自由で、個性のあるブログを作れる(テーマ開発など) ブログの記事をファイルで作成するので、コード管理ができる 2) Git Pagesとは？#https://pages.github.com Githubで提供している、無料ウェブページホスティングサービスです。html, css, jsなどの静的コンテンツのみですが、無料でウェブページをサービスできます。 3) Hexoとは？#https://hexo.io node基盤の「静的ページゼネレーター」の一つです。サーバーの動的処理なしに、リッチなウェブページやブログなどを生成してくれます。 4) 完成イメージ#以下のように、ブログを作り、一つの記事をポストします。 では、早速作って見ましょう。 2. Blogを作る手順#1) Hello World on Git Pages#Git Pages Manualhttps://pages.github.com/ ① ホスティング用のレポジトリ生成#{userid}.github.ioの名前でパブリック・レポジトリを生成します。上記の規則で作成したレポジトリは、自動的にGit Pagesの機能により、ウェブホスティングされます。 ② index.htmlをプッシュ#index.htmlを作り、{userid}.github.ioレポジトリにをプッシューします。 123456789git clone https://github.com/{username}/{username}.github.io.gitcd {username}.github.iotouch index.htmlgit add index.htmlgit commit -m \"first commit\"echo \"Hello World\" &gt; index.htmlgit add index.htmlgit commit -m \"second commit\"git push origin master ③ git page build結果確認#Github Actionを見ると、上げたindex.htmlがGit Pagesとしてビルドされていることを確認できます。 ④ 確認#https://{username}.github.ioにアクセスすると、Hello Worldが確認できます。これで、ウェブページのホスティングの準備ができました。 2) hexo 設置 &amp; 設定 (静的ページゼネレーター)#Hexoを使うためには、まずnode&amp;npmのインストールが必要です。もし、インストールが必要な方は、以下の公式ページをご参考ください。 ● nodejs with npmhttps://nodejs.org/ja/ Hexoの公式 docs &amp; Installationはこちらで参考できます。https://hexo.io/docs/ ① インストール#hexoをインストールします。 1234npm install -g hexo-clihexo init blogcd blognpm install ② hexo-deployer-git plugin インストール#One Commandで、githubにデプロイするためのプラグインを予めインストールします。プラグインの詳細はこちらで確認できます。 https://github.com/hexojs/hexo-deployer-git 1npm install hexo-deployer-git --save ③ _config.yml 設定#基本的なconfig設定を行います。 url Git PagesのURLを設定します。 new_post_name Post記事の生成時のファイル名を設定します。ここは必須に変える必要は無いですが、datetimeをつけたほうが管理しやすいと思います。 Deployment hexo-deployer-gitのpluginをインストールしたので、gitのデプロイ設定ができます。 messageは、設定しないと基本メッセージとして、Site updated: YYYY-MM-DD HH:mm:ssの形式でコミットメッセージが残ります。 123456789101112131415diff --git a/_config.yml b/_config.yml-url: http://yoursite.com+url: https://{username}.github.io/-new_post_name: :title.md # File name of new posts+new_post_name: :year_:month_:day_:title.md # File name of new posts # Deployment ## Docs: https://hexo.io/docs/deployment.html deploy:- type: ''+ type: git+ repo: https://github.com/{username}/{username}.github.io+ branch: master これで、ブログの基本設定は終わりました。 3) 記事作成#記事を作成します。 ① 記事のソース・マークダウン生成#hexo new {title}で、新しい記事が生成できます。すると、以下のように新しいファイルが生成されます。 12$ hexo new \"first post\"INFO Created: D:\\Develop\\_GitPages\\blog\\source\\_posts\\2020_07_04_first-post.md ② マークダウン・ファイル編集#生成された記事のマークダウンを開き、試しに以下のように変更します。 123456789101112131415161718192021222324252627282930313233343536373839404142434445---title: first postdate: 2020-07-04 18:52:00tags: - hello worldcategory: - hello worldexcerpt: welcome to my blog---Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).## Quick Start### Create a new post``` bash$ hexo new \"My New Post\"```More info: [Writing](https://hexo.io/docs/writing.html)### Run server``` bash$ hexo server```More info: [Server](https://hexo.io/docs/server.html)### Generate static files``` bash$ hexo generate```More info: [Generating](https://hexo.io/docs/generating.html)### Deploy to remote sites``` bash$ hexo deploy```More info: [Deployment](https://hexo.io/docs/one-command-deployment.html) これで記事作成まで完了しました。 4) 確認・デプロイ#① Localでブログ確認#hexo serverコマンドを使うと、ウェブホスティングで公開する前に、ロケールで予めブログとコンテンツを確認できます。 123$ hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. ● localhost:4000 ● localhost:4000/2020/07/04/first-post/#more ② Deploy to Git Pages#hexo deployコマンドを使うと、設定したGithubレポジトリに自動でプッシューしてくれます。 12345678$ hexo deployINFO Start processingINFO Files loaded in 101 ms...To https://github.com/{username}/{username}.github.io + 69bd38f...fa420ac HEAD -&gt; master (forced update)Branch 'master' set up to track remote branch 'master' from 'https://github.com/{username}/{username}.github.io'.INFO Deploy done: git ③ gitpagesのURLで確認#Git Pagesとして動作しているレポジトリのMasterブランチにプッシューしたので、Github Actionでビルドが完了していると、https://{username}.github.ioにアクセスすると、確認できます。 これで、自分のブログが出来上がりました。 Extra) テーマ変更#Hexoは、いろんなテーマから、いろんなデザインを適用できます。 ● Hexo Themehttps://hexo.io/themes/ 今回は、meilidu-hexoというテーマをダウンロードして、ブログのデザインを変えて見ます。 ① テーマインストール#以下のレポジトリを参考し、テーマをインストールします。https://github.com/HoverBaum/meilidu-hexo 1git clone https://github.com/HoverBaum/meilidu-hexo.git themes/meilidu ② _config.ymlのtheme変更#テーマの設定を変更します。 1234diff --git a/_config.yml b/_config.yml-theme: landscape+theme: meilidu ③ deploy &amp; GitPages 確認#hexo cleanで、既存のベルドされたソースを消し、hexo deployで、新しくでビルド・デプロイします。 Github Actionsで、Git Pagesビルドが完了すると、テーマが適用されたことを確認できます。 12hexo cleanhexo deploy 後書き#今回は、Git Pagesとhexoで、簡単なブログを作って見ました。 公開されているテーマをすこしカスタマイズして使うことだけでも、それなりのデザインと機能を備えた設置型ブログを無料で構築＆ホスティングできます。 Wordpressみたいな設置型ブログの機能には及ばずとも、完全に無料で設置型ブログを持つことが可能なのは、それなりに魅力的ではないでしょうか。 次は、Git Pagesと静的ページゼネレーターを利用して、簡単なウェブサービス的なものもチャレンジしてみたいですね。 皆様も、なにかGit Pagesと静的ページゼネレーターの良い活用事例があったら、ぜひ共有して頂けると嬉しいです。","link":"/2020/07/07/Git-Pages-Hexo%E3%81%A7%E6%89%8B%E8%BB%BD%E3%81%AA%E7%84%A1%E6%96%99Blog%E3%82%92%E4%BD%9C%E3%82%8B/"},{"title":"DockerでLAMP&amp;Redis環境を構築しながら、色々使い方を覚える","text":"やること#1234567php-fpm(php7.4)centos7apache2.4mariadbphpMyadminnodejs (with Gulp)redis 上記の環境をDockerで構成する Dockerfileと各環境の設定ファイルを構成する docker-compose.ymlを構成する docker-composeで各環境のコンテナーを起動し内部状態を確認する Laravel上で、MariaDBとRedisのコネクションを確認する 全体ソースコード#https://github.com/genie-oh/docker-lamp 参考にした記事&amp;Github レポジトリ#https://qiita.com/temori1919/items/487d68a19ca1de1a63c8https://github.com/temori1919/docker-lamp 基本レファレンス#Dockerfileのレファレンスhttps://docs.docker.com/engine/reference/builder/ Docker Composeのレファレンスhttps://docs.docker.com/compose/compose-file/ 1. Docker構成#1) web構成 (centos &amp; apache)#公式 dockerhubhttps://hub.docker.com/_/centos 構造#12345docker-lamp/`-- web| |-- Dockerfile| |-- docker.conf # Copy to /etc/httpd/conf.d| `-- logs # for apache log web/docker.conf#Apacheのconfig。主にバーチャルホスト関連設定を定義する。phpの処理はphp-fpmに任せるのでproxy設定をしておく。 1234567891011121314151617181920# rootdomain&lt;VirtualHost *:443&gt;... ServerName lamplocal.me VirtualDocumentRoot /var/www/html/home_root/public...&lt;/VirtualHost&gt;# subdomain. phpの動作が可能&lt;VirtualHost *:443&gt;... ServerName lamplocal.me ServerAlias *.lamplocal.me VirtualDocumentRoot /var/www/html/home_sub/%1/public &lt;FilesMatch \\.php$&gt; SetHandler &quot;proxy:fcgi://php:9000&quot; &lt;/FilesMatch&gt;...&lt;/VirtualHost&gt; web/Dockerfile#apache.2.4のインストール任意のSSL認証書を作成docker.confをコンテナーにコピー 1234567891011# centos:7のイメージを元にコンテナーを作成FROM centos:7 # 指定のコマンド実行RUN ... # ホストシステムからコンテナーにファイルをコピーCOPY docker.conf /etc/httpd/conf.d/docker.conf # コンテナー起動時に実行するコマンドCMD [\"/usr/sbin/httpd\", \"-DFOREGROUND\"] 2) php構成 (php-fpm 7.4)#公式 dockerhubhttps://hub.docker.com/_/php 構造#12345docker-lamp/|-- php| |-- Dockerfile| |-- logs # For xdebug.log| `-- xdebug.ini # Copy to /usr/local/etc/php/conf.d xdebug.ini#xdebugの基本設定の他に、xdebug.logを残すように設定 1xdebug.remote_log=/var/log/xdebug/xdebug.log Dockerfile#1234567891011121314# php:7.4-fpmのイメージを元にコンテナーを作成FROM php:7.4-fpm# phpのイメージで提供するユティリティの`docker-php-ext-install`,`docker-php-ext-enable`でPHP EXTENSTIONを設置RUN pecl install xdebug-2.8.1 \\ &amp;&amp; docker-php-ext-enable xdebug \\ &amp;&amp; docker-php-ext-install bcmath pdo_mysql# ホストシステムからコンテナーにファイルをコピーCOPY ./xdebug.ini $PHP_INI_DIR/conf.d/# 外部イメージから、コンテナーにファイルをコピー# 公式composerイメージから、phpコンテナーにcomposerを設置COPY --from=composer:latest /usr/bin/composer /usr/bin/composer 3) mariaDB構成#公式 dockerhubhttps://hub.docker.com/_/mariadb 構造#12345docker-lamp/|-- db| |-- Dockerfile| |-- logs # For slow query log| `-- my.cnf # Copy to /etc/mysql/conf.d my.cnf#参考記事https://qiita.com/mamy1326/items/9c5eaee3c986cff65a55 charsetや、slow query log、wait timeout、その他innodb関連設定 12345678910default-character-set=utf8mb4character-set-server=utf8mb4# slow query logslow_query_log=trueslow_query_log-file=/var/log/mysql/mysql-slow.sqllong_query_time=1# コネクションタイムアウト時間wait_timeout=28800 Dockerfile#12FROM mariadbCOPY my.cnf /etc/mysql/conf.d/my.cnf 4) redis構成#公式 dockerhubhttps://hub.docker.com/_/redis 構成#123456docker-lamp/|-- redis| |-- Dockerfile| |-- data # for redis data| |-- logs # for redis log| `-- redis.conf # Copy to /usr/local/etc/redis/redis.conf redis.conf#redis-serverの設定 参考記事https://qiita.com/uryyyyyyy/items/9ccadcccf7f7060d544a redisのログを残すように設定 1logfile &quot;/var/log/redis/redis-server.log&quot; Dockerfile#1234FROM redisRUN mkdir /var/log/redisCOPY ./redis.conf /usr/local/etc/redis/redis.confCMD [ \"redis-server\", \"/usr/local/etc/redis/redis.conf\" ] 5) nodeの構成#公式 dockerhubhttps://hub.docker.com/_/node 構成#12|-- node| `-- Dockerfile Dockerfile#123456789101112FROM node:latestRUN npm install -g gulp@3.9.1 gulp-phpunit config &amp;&amp; \\ npm install gulp@3.9.1 gulp-phpunit config &amp;&amp; \\ apt-get -y update &amp;&amp; \\ apt-get -y upgrade &amp;&amp; \\ apt-get -y install ca-certificates apt-transport-https &amp;&amp; \\ wget -q https://packages.sury.org/php/apt.gpg -O- | apt-key add - &amp;&amp; \\ echo \"deb https://packages.sury.org/php/ stretch main\" | tee /etc/apt/sources.list.d/php.list &amp;&amp; \\ apt-get -y update &amp;&amp; \\ apt-get -y install php7.2 php7.2-cli php7.2-common php7.2-opcache php7.2-curl php7.2-mbstring php7.2-mysql php7.2-zip php7.2-xmlWORKDIR /var/www/html 2. document root構成#12345678910111213docker-lamp/|-- code # -- Mounted on /var/www/html| |-- config| | `-- default.json.example| |-- gulpfile.js| |-- home_root # -- root home| | `-- public # documentroot of lamplocal.jp| | `-- index.html # can run only static contents.| |-- home_sub # -- virtual host home| | `-- test # you can add directory &amp; use by subdomain| | `-- public # documentroot of test.lamplocal.jp| | `-- index.php # can run php script| `-- nodeapp 3. docker-compose.yml構成#123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172version: '3.7'services:# centos7 apache2.4.*(http2) web: build: ./web container_name: lamp-web ports: - '443:443' volumes: - ./code:/var/www/html - ./web/logs:/var/log/httpd - cert:/etc/ssl/private restart: always env_file: .env# php-fpm 7.4 php: build: ./php container_name: lamp-php ports: - '9000' volumes: - ./code:/var/www/html - ./php/logs:/var/log/xdebug restart: always env_file: .env# mariaDB db: build: ./db container_name: lamp-db restart: always env_file: .env ports: - 3306:3306 volumes: - ./db/logs:/var/log/mysql - datastore:/var/lib/mysql# phpMyadmin phpmyadmin: container_name: lamp-phpmyadmin image: phpmyadmin/phpmyadmin env_file: .env ports: - 8080:80 depends_on: - db# node js (include gulp) node: build: ./node container_name: lamp-node restart: always tty: true environment: - NODE_ENV=production ports: - '3000:3000' volumes: - ./code:/var/www/html depends_on: - web# redis server redis: build: ./redis container_name: lamp-redis restart: always ports: - '6379:6379' volumes: - \"./redis/data:/data\" - \"./redis/logs:/var/log/redis\"volumes: cert: datastore: 4. 動作確認#aliasを使っていますが、実行コマンドはexecute :で出力しているので参考にしてください。 alias設定の内容と各命令の解説はこちらを参考できます。https://qiita.com/genie-oh/items/266857d788a85e2da8f9 1) build#12345678910111213141516171819202122232425$ al dockiexecute : docker imagesREPOSITORY TAG IMAGE ID CREATED SIZE$ al dockcbexecute : docker-compose buildphpmyadmin uses an image, skippingBuilding web......Successfully built 43bb05ec0f39Successfully tagged docker-lamp_redis:latest$ al dockiexecute : docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEdocker-lamp_redis latest 43bb05ec0f39 About a minute ago 104MBdocker-lamp_node latest 1cffc83ebe6f About a minute ago 1.06GBdocker-lamp_db latest e112492cc9c2 4 minutes ago 407MBdocker-lamp_php latest 5a3452fcbf58 4 minutes ago 671MBdocker-lamp_web latest 9af33e8e4219 9 minutes ago 540MB... 2) run containers#12345678910111213141516171819202122$ al dockcuexecute : docker-compose up -d...Status: Downloaded newer image for phpmyadmin/phpmyadmin:latestCreating lamp-web ... doneCreating lamp-php ... doneCreating lamp-redis ... doneCreating lamp-db ... doneCreating lamp-node ... doneCreating lamp-phpmyadmin ... done$ al dockpsexecute : docker ps -aCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESea93226c6b49 phpmyadmin/phpmyadmin \"/docker-entrypoint.…\" 17 seconds ago Up 14 seconds 0.0.0.0:8080-&gt;80/tcp lamp-phpmyadmin52a68fde7bdd docker-lamp_node \"docker-entrypoint.s…\" 17 seconds ago Up 14 seconds 0.0.0.0:3000-&gt;3000/tcp lamp-node13e52a01700e docker-lamp_php \"docker-php-entrypoi…\" 19 seconds ago Up 16 seconds 0.0.0.0:32837-&gt;9000/tcp lamp-php43eb81b6410e docker-lamp_web \"/usr/sbin/httpd -DF…\" 19 seconds ago Up 15 seconds 0.0.0.0:443-&gt;443/tcp lamp-web473ffaf3439b docker-lamp_redis \"docker-entrypoint.s…\" 19 seconds ago Up 15 seconds 0.0.0.0:6379-&gt;6379/tcp lamp-redisae80a8fd00c6 docker-lamp_db \"docker-entrypoint.s…\" 19 seconds ago Up 15 seconds 0.0.0.0:3306-&gt;3306/tcp lamp-db 3) access web#12345$ curl -k https://lamplocal.me --silent | grep \"&lt;title&gt;\" &lt;title&gt;Hello World&lt;/title&gt;$ curl -k https://test.lamplocal.me --silent | grep \"&lt;title&gt;\"&lt;title&gt;PHP 7.4.7 - phpinfo()&lt;/title&gt;&lt;meta name=\"ROBOTS\" content=\"NOINDEX,NOFOLLOW,NOARCHIVE\" /&gt;&lt;/head&gt; 4) check each package version in container#12345$ al dockeit lamp-web httpd -vexecute : docker exec -it lamp-web httpd -vServer version: Apache/2.4.41 (IUS)Server built: Aug 25 2019 19:41:04 1234567$ al dockeit lamp-php php -vexecute : docker exec -it lamp-php php -vPHP 7.4.7 (cli) (built: Jun 11 2020 18:41:17) ( NTS )Copyright (c) The PHP GroupZend Engine v3.4.0, Copyright (c) Zend Technologies with Xdebug v2.8.1, Copyright (c) 2002-2019, by Derick Rethans 1234$ al dockeit lamp-db mysql --versionexecute : docker exec -it lamp-db mysql --versionmysql Ver 15.1 Distrib 10.5.4-MariaDB, for debian-linux-gnu (x86_64) using readline 5.2 1234$ al dockeit lamp-redis redis-server -vexecute : docker exec -it lamp-redis redis-server -vRedis server v=6.0.5 sha=00000000:0 malloc=jemalloc-5.1.0 bits=64 build=db63ea56716d515f 1234$ al dockeit lamp-node node -vexecute : docker exec -it lamp-node node -vv14.5.0 5) down containers#12345678910111213141516$ al dockcdexecute : docker-compose downStopping lamp-phpmyadmin ... doneStopping lamp-node ... doneStopping lamp-php ... doneStopping lamp-web ... doneStopping lamp-redis ... doneStopping lamp-db ... doneRemoving lamp-phpmyadmin ... doneRemoving lamp-node ... doneRemoving lamp-php ... doneRemoving lamp-web ... doneRemoving lamp-redis ... doneRemoving lamp-db ... doneRemoving network docker-lamp_default 6) 特定コンテナーのみ実行#1234$ dockcu php dbCreating network \"docker-lamp_default\" with the default driverCreating lamp-php ... doneCreating lamp-db ... done 7) php, mariadb, redis 連携確認#laravelをインストールし、各コネクションを確認 1234567891011# docker-lamp\\code\\home_sub\\cgi\\.envDB_CONNECTION=mysqlDB_HOST=lamp-dbDB_PORT=3306DB_DATABASE=laravelDB_USERNAME=rootDB_PASSWORD=rootpwREDIS_HOST=lamp-redisREDIS_PASSWORD=nullREDIS_PORT=6379 1234567891011121314151617# docker-lamp\\code\\home_sub\\cgi\\app\\Http\\Controllers\\TestController.php&lt;?phpnamespace App\\Http\\Controllers;use Illuminate\\Support\\Facades\\Redis;use Illuminate\\Support\\Facades\\DB;class TestController extends Controller{ public function index () { $redisResult = Redis::connection()-&gt;ping('redis pong'); $dbResult = DB::table('test')-&gt;get(); return view('test/index', compact('redisResult', 'dbResult')); }} 123$ curl -k https://cgi.lamplocal.me/testredisResult : redis pongdbResult : [{\"id\":0,\"name\":\"abc\"}] 後書き# 違うプラットフォームの開発完了などをDockerでコード化しておくと、いろんな開発環境に柔軟に対処できるのはいい。 PythonやJava、Full Stack Javascript環境も構成してコード化しておきたい。 機会があれば、Dockerイメージのサービスデプロイ＆運用も勉強したい。（Kubernate, AWS ECS）","link":"/2020/07/11/Docker%E3%81%A7LAMP-Redis%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89%E3%81%97%E3%81%AA%E3%81%8C%E3%82%89%E3%80%81%E8%89%B2%E3%80%85%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E8%A6%9A%E3%81%88%E3%82%8B/"},{"title":"vscode・Emmet Snippetでhtml,cssを手っ取り早くかく","text":"やること# vscodeに基本提供されているemmet snippetsを使い、手っ取り早くhtml, cssを書くことを試みる emmetはどういうものかをざっくり目を通す vscodeのEmmet Snippetsとは？#https://code.visualstudio.com/docs/languages/html#_emmet-snippets vscodeは、基本的にemmetのauto-completionを提供している。 htmlのauto-completion例#1ul&gt;li*3&gt;span.hello$ を書くと 12345&lt;ul&gt; &lt;li&gt;&lt;span class=\"hello1\"&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=\"hello2\"&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class=\"hello3\"&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt; こういうふうに、HTMLを自動で完成してくれる。 cssのauto-completion例#1p10 を書くと 1padding: 10px; こういうふうに、css属性を自動で完成してくれる。 Emmetとは#Emmetは既定形式の入力補完機能によりHTML、XML、XSL等を素早く編集できる、テキストエディタ用プラグインvscodeは、このプラグインを基本搭載している。 Emmetでできること#html, css, xslのauto-completion Emmet Documents#Cheat Sheetsのいくつかを覚えておくと便利 ● Cheat Sheets(html, css, xsl)https://docs.emmet.io/cheat-sheet/ ● Syntax &amp; Documentationhttps://docs.emmet.io/abbreviations/syntax/","link":"/2020/07/11/vscode%E3%83%BBEmmet-Snippet%E3%81%A7html-css%E3%82%92%E6%89%8B%E3%81%A3%E5%8F%96%E3%82%8A%E6%97%A9%E3%81%8F%E3%81%8B%E3%81%8F/"},{"title":"Typescript書き方の速成まとめ","text":"目次# 1. 概論・セットアップ 2. tsconfig 3. TypeScript Basic Types 4. var, let, const 5. Type Assertion 6. Type Alias 7. Interface 8. Class 9. Generic 10. keyof -Lookup Types- 11. Iterator 12. Decorator 13. Type Inference 1. 概論・セットアップ# transpile言語 (類似コンパイル言語) Javascriptと交換 Typescriptの主な役目 コンパイル時にタイプチェックを行うこと Typescript setup &amp; compile#1234567891011# 初期化npm init -ynpm -i typescript [-g]%init tsconfig.json./node_modules/.bin/tsc --init # compiletsc {filename} # watch &amp; auto compile, 実用的ではない(glup推奨)tsc -w typescript online play#https://www.typescriptlang.org/play 2. tsconfig#http://json.schemastore.org/tsconfig ● Top Level Properties 1234567compileOptions ★compileOnSave //boolean : セーブと同時にコンパイル(IDE)extends //relative pathfiles //path(glob)include //path(glob)exclude //path(glob)typeAcquisition compileOptions : type# TypeScript2からサポートするType Definition System関連オプション 何も設定しないと、自動で./node_nodules/@types/*をインポート ex: ./node_nodules/@types/react/*, ./node_nodules/@types/babel__*/* @typesは、コンパイル時のタイプチェックはもちろん、IDEのコードアシスト、シンタクスチェックなどでも使われる大事な定義ファイル typeRoots 設定すると、設定したパスだけインポート types 設定すると、配列内に指定したモジュール、または./node_nodules/@types/内のモジュール名から探す。 []だと使わない typeRootsはtypesは、どっちか一つだけ使う。 12345678910\"typeRoots\": { \"description\": \"Specify list of directories for type definition files to be included. Requires TypeScript version 2.0 or later.\", \"type\": \"array\", ...},\"types\": { \"description\": \"Type declaration files to be included in compilation. Requires TypeScript version 2.0 or later.\", \"type\": \"array\", ...}, compileOptions : target, lib# target buildするバージョンを指定 指定しないと、基本esバージョン lib 基本type difinitionライブラリを指定 指定しないと、esバージョンに依存したライブラリを使用 指定すると、指定したライブラリのみを使う 12345678910\"target\": { \"description\": \"Specify ECMAScript target version: 'ES3', 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', 'ESNext'\", \"type\": \"string\", ...},\"lib\": { \"description\": \"List of library files to be included in the compilation. Possible values are: 'ES5', 'ES6', 'ES2015', 'ES7', 'ES2016', 'ES2017', 'ES2018', 'ESNext', 'DOM', 'DOM.Iterable', 'WebWorker', 'ScriptHost', 'ES2015.Core', 'ES2015.Collection', 'ES2015.Generator', 'ES2015.Iterable', 'ES2015.Promise', 'ES2015.Proxy', 'ES2015.Reflect', 'ES2015.Symbol', 'ES2015.Symbol.WellKnown', 'ES2016.Array.Include', 'ES2017.object', 'ES2017.Intl', 'ES2017.SharedMemory', 'ES2017.String', 'ES2017.TypedArrays', 'ES2018.Intl', 'ES2018.Promise', 'ES2018.RegExp', 'ESNext.AsyncIterable', 'ESNext.Array', 'ESNext.Intl', 'ESNext.Symbol'. Requires TypeScript version 2.0 or later.\", \"type\": \"array\", ...}, compileOptions : outDir, outFile#12345678\"outDir\": { \"description\": \"Redirect output structure to the directory.\", \"type\": \"string\"},\"outFile\": { \"description\": \"Concatenate and emit output to single file.\", \"type\": \"string\"}, compileOptions : module# module compileされた結果物のモジュールシステムを指定 targetがes6だと、es6がデフォルト targetがes６じゃないとcommonjsがデフォルト moduleResolution tsソースで使用されるモジュールを指定 CommonJSの場合Node、それ以外はだいたいClassic pathsと baseUrl 指定すると、該当パスのモジュールをロード 普通使わなくてOK。（細かいモジュール連携に必要） rootDirs ロードするモジュールのルートパス配列 普通使わなくてOK。（細かいモジュール連携に必要） 123456789101112131415161718192021222324252627282930\"module\": { \"description\": \"Specify module code generation: 'None', 'CommonJS', 'AMD', 'System', 'UMD', 'ES6', 'ES2015', 'ES2020' or 'ESNext'. Only 'AMD' and 'System' can be used in conjunction with --outFile.\", \"type\": \"string\", ...},\"moduleResolution\": { \"description\": \"Specifies module resolution strategy: 'node' (Node) or 'classic' (TypeScript pre 1.6) .\", \"type\": \"string\", ...},\"baseUrl\": { \"description\": \"Base directory to resolve non-relative module names.\", \"type\": \"string\"},\"paths\": { \"description\": \"Specify path mapping to be computed relative to baseUrl option.\", \"type\": \"object\", \"additionalProperties\": { \"type\": \"array\", \"items\": { \"type\": \"string\", \"description\": \"Path mapping to be computed relative to baseUrl option.\" } }},\"rootDirs\": { \"description\": \"Specify list of root directories to be used when resolving modules.\", \"type\": \"array\", ...}, 3. TypeScript Basic Types#TypeScriptで定義した基本データタイプUser Defined Typesも、基本データタイプからの拡張 superset (ECMAScript Standard)# boolean, number, string, null, undefined array (object, non-primitive) symbol (ecma6) 固有で修正不可能なデータとしてアサイン primitive値を指定 Subtypes undefined &amp; nullは、すべてのタイプに対してのサブタイプ すべてのタイプに、undefinedとnullはアサインできる。 しかし、compileOptionで, --strictNullChecksを使うと、voidか、自分自身にだけアサインでできるようになる。 その場合は、union typeで指定しなきゃいけない。 ex : let union: string | null | undefined = 'str' Additional Type# void タイプがない、空の概念 関数のリターンタイプくらいで使う（リターンする値がない時） any 何のタイプにもなれる Anyは非推奨、TypeScriptを使う意味が薄れる。 compileOptionで、エラーになるように指定も可能(noImplicitAny) never 結果を返さないため、タイプを持たない。 あんまり使うところがないが、関数のリターンタイプくらいで使う infinitely loop function absolutely throw Error absolutely return error(‘message’) enum 列挙型(他の言語と同じ) 複数の変数に対して、一連の定数値をアサイン enum Color {Red, Green, Blue}; let c: Color = Color.Red; let colorName: string = Color[c]; tuple (object, non-privitive) 複合タイプを持つ配列 let x: [string, number] =['hello', 10]; 値を持って使うときに、どういうタイプかチェックしない限りわからないため、使うのに注意は必要 Union Type タイプの共用体 let someVar: string | number | boolean = false Type Assigned by literal# Literal値で、タイプを定義するのも可能。指定したLiteralのみ設定可能 let someVar: &quot;a&quot; | 5 | false = 5 Genericパートで記述するkeyof (Indexed Type Query)演算子の理解とつながる。 4. var, let, const#VS var, let, const# var ES5 variable scope : function hoisting : O re-difinition : O let, const ES6 variable scope : block hoisting : X re-difinitio : X varより、let, const推奨 コード分析が直感的になる letとconstのタイプ推論 let a: string = &quot;str&quot;; //明示的string type let b = &quot;str&quot;; //タイプ推論によるstring type const c: string = &quot;str&quot;; //明示的string type const d = &quot;str&quot;; //タイプ推論によるLiteral type 5. Type Assertion# とある変数を参照する時、タイプを明示的に絞ること type castingとは違い、データを変換したりしない とある変数を、指定タイプであることを前提に使うという宣言 もし使う場合があるなら、宣言に対しての信頼性が大事 使い方 someVar as TYPE &lt;TYPE&gt;someVar (jsxと紛らわしいので、非推奨) 12345// 主に曖昧なタイプから絞るときに使う。// 曖昧なタイプである時点で、ベストプラクティスではないので、参考までに見ることslet someVar: any = \"some string\";let strLength: number =(someVar as string).length; 6. Type Alias#特定のタイプに別称をつけて使うことができる。あくまで、作られたタイプの参照を持つだけで、タイプを作ることではない。 1234567//alias to union typelet varA: string | number = 0;varA = \"A\";type StringOrNumber = string | number;let varB = 0;varB = \"B\"; 7. Interface#実装を持たず、ステート（プロパティ）とビヘイビアの形式の定義のみを記述した抽象データタイプ。 インタフェースの抽象というのは、インスタンス化観点から抽象的であり具体を持たいないため、単体では実態を持てないという意味を内包している。 継承するクラスたちに対してのプロトコル（約束）の役目を果たす。 interface basics#123456789101112131415161718//interfaceinterface Person { name: string; //--optional type age?: number; //-- function interface say(): string;}const person:Person = { name: \"Mark\", age: 34, say: (): string { return `hello. name=${this.name}`; }} interface - indexable type#indexのタイプとしては、stringか、numberを指定可能 12345678910interface Person { //--indexable type (number or string) [index: string]: string;}const person:Person = { name: \"Mark\"}person.age = \"34\";person[\"age\"] = \"34\";//person.age = 34; //index type error 123456789interface NumIndex { //--indexable type (number or string) [index: number]: object;}const queue:NumIndex = {}queue[0] = new Object();queue[1] = new Object();//queue[\"abc\"] = new Object(); //index type error//queue.abc = new Object(); //index type error class implements interface#1234567891011121314151617181920interface IPerson { name: string; age?: number; say(): void;}class Person implements IPerson { name: string; constructor(name: string) { this.name = name; } say(): void { console.log(`hello. myname is ${this.name}.`); }}const person = new Person(\"Mark\");person.say(); interface extends interface#12345678intrface Person { name: string; age: number;}interface SalaryMan extends Person { job: string;} function with interface#123456789interface funcPerson { (name: string, age?: number): void;}const sayPerson: funcPerson = function (name: string) { console.log(`hello. myname is ${name}.`);}sayPerson(\"Mark\"); 8. Class#オブジェクトの初期ステート（プロパティ）とビヘイビアを記述したテンプレートであり、User Defined Data Type. class basics#12345678910111213141516171819class Person { protected _name: string = null; private _age: number = null; set _age;}class SalaryMan extends Person { private _job: string = null; constructor(name: string) { super(); this.name = name; }}const man: SalaryMan = new SalaryMan(\"Mark\"); Abstract class#123456789101112abstract class APerson { protected _name: string = \"NoName\"; abstract setName(name: string): void;}class Person extends APerson { setName(name: string): void { this._name = name; }}const person = new Person(); readonly keyword &amp; static keyword &amp; private constructor#※ typescriptでは、anti-partternだという意見もあり 1234567891011121314151617181920212223242526272829303132333435class Logger { private static singletonInstance: Logger; public readonly initTime: number; private constructor(){ this.initTime = new Date().getTime(); } public static getLogger = ():Logger =&gt; { if (Logger.singletonInstance === undefined) { Logger.singletonInstance = new Logger(); } return Logger.singletonInstance; } logInfo = (msg: string):void =&gt; { console.log(`logger-${this.initTime} : ${msg}`); }}Logger.getLogger().logInfo(\"first log\");setTimeout( (): void =&gt; { Logger.getLogger().logInfo(\"after 2sec log\"); }, 2000);//Logger.getLogger().initTIme = 5; //error because readonly property//--output//logger-1590906992695 : first log//logger-1590906992695 : after 2sec log 9. Generic#パラメータのデータタイプを、インスタンス化の後で明示するプログラミング手法（to-be-specified-later）入力・出力のデータタイプを、任意のタイプに抽象化宣言する。タイプチェックは、ランタイムの前にコンパイラでしてくれるが、内部動作メカニズムとしては、実際にどういうデータタイプで入力・出力されるかは、インスタンス化後、実際に呼び出されるときに確定される。 Generic basics#1234567function doPingPong&lt;T&gt;(message: T): T { return message;}console.log(doPingPong&lt;string&gt;(\"text\"));console.log(doPingPong&lt;number&gt;(10));console.log(doPingPong&lt;object&gt;({key: \"value\"})); Generic with class#1234567891011121314151617181920class Code&lt;T extends string | number, O&gt; { private _code: T; private _data: O; constructor(code: T, data: O) { this._code = code; this._data = data; } getCode = (): T =&gt; { return this._code; } getData = (): O =&gt; { return this._data; }}const abc = new Code&lt;string,string&gt;(\"ABC\", \"data\");const oneTwoThree = new Code&lt;number, object&gt;(123, {}); 10. keyof -Lookup Types-#keyof basics# Indexed Type Lookup Query 演算子 オブジェクトで、アクセスが許容されているプロパティのインデックスをLiteral Typeとして算出する。 Genericと一緒に使うと有用 12345678910111213//-- indexed type query from Interfaceinterface IObj { keyA: number; keyB: number; }type restrictedAsKeysOfInterface = keyof IObj;let v1: restrictedAsKeysOfInterface = \"keyA\"; //same &gt;&gt; let v1: \"keyA\" | \"keyB\" = \"keyA\";// let v2: restrictedAsKeysOfInterface = \"key?\"; // error//-- indexed type query from Object(typeof)const obj = {keyA : 0, keyB : 1};type restrictedAsKeysFromObject = keyof typeof obj; //same &gt;&gt; let v1: \"keyA\" | \"keyB\" = \"keyA\";// let v2: restrictedAsKeysOfInterface = \"key?\"; // error Generic with keyof# ランタイム前に、間違ったプロパティアクセスなどが検出できる。 1234567891011121314151617function getProperty&lt;T, K extends keyof T&gt;(obj:T, key:K) { return obj[key];}interface Person { name: string; age: number;}const person: Person = { name: \"Mark\", age: 35}getProperty(person, \"name\");getProperty(person, \"age\");//getProperty(person, \"unknown\"); //unasignable type error 11. Iterator#今までの巡回#Array巡回#12345678// es3for (var i = 0; i &lt; array.length; i++)// es5array.forEach() //breakができないので、anti pattern// es6for (const item of array) // arrayのみ使える Object巡回#1234567891011// -- for in// 推奨されない。理由は以下// - hello worldobject巡回時に使う。(arrayには柄はないはず)// - indexがnumberじゃなくstringで出る// - 配列内のプロパティも意図とは違って巡回できる可能性がある// - prototype chainのプロパティを巡回できる可能性もある// - 巡回の順序を保証しない// for ofが推奨される。// -- objectを巡回するときには、for ofで以下のように使うことも可能for (const prop of Object.keys(obj)) example#12345678910111213141516171819202122232425262728293031323334const array = ['first', 'second'];const obj = { name: 'Mark', age: 35};// use for..of on Arrayfor (const item of array) { console.log(typeof item + ', ' + item);}// use for..in on Array// item type is string. value is numeric stringfor (const item in array) { console.log(typeof item + ', ' + item);}// use for..of on Object =&gt; Error/*for (const item of obj) { console.log(typeof item + ', ' + item);}*/// use for..in on Objectfor (const item in obj) { console.log(typeof item + ', ' + item);}// use for..on using keys on Objectfor (const item of Object.keys(obj)) { console.log(typeof item + ', ' + item);} Symbol.iterator#概要# プロパティ。巡回関数が具現されているとiterableなタイプになる。 Array, Map, Set, String, Int32Array, Uint32Arrayなどには、内蔵された具現体があるので、iterableなタイプである。 ただのobjectはiterableではない。 Iteratorを使い、IterableなオブジェクトのSymbol.iterator関数を呼び出す。 target# es3 or es5 Arrayのみfor..ofを使える オブジェクトに使うとエラー es6 SYmbol.iteratorを具現すると、どんなオブジェクトにもfor..ofを使える typescriptのIteratorインタフェース#12345678910111213141516171819// lib.es6.d.tsinterface IteratorResult&lt;T&gt; { done: boolean; value: T;}interface Iterator&lt;T&gt; { next(value?: any): IteratorResult&lt;T&gt;; return?(value?: any): IteratorResult&lt;T&gt;; throw?(e?: any): IteratorResult&lt;T&gt;;}interface Iterable&lt;T&gt; { [Symbol.iterator](): Iterator&lt;T&gt;;}interface IterableIterator&lt;T&gt; extends Iterator&lt;T&gt; { [Symbol.iterator](): IterableIterator&lt;T&gt;;} Iterable具現#12345678910111213141516171819202122232425class CustomIterable implements Iterable&lt;string&gt; { private _array: Array&lt;string&gt; = ['first', 'second']; [Symbol.iterator]() { var nextIndex = 0; return { next: () =&gt; { return { value: this._array[nextIndex++], done: nextIndex &gt; this._array.length } } } }}const cIterable = new CustomIterable();for (const item of cIterable) { console.log(item);}//[LOG]: first //[LOG]: second 12. Decorator# Decoratorを使うためには、config設定必要 各Decoratorパターンに対するシグニチャーを見ておくこと Setting#12345678$ mkdir ts-decorator$ cd ts-decorator$ yarn init -y$ yarn add typescript -D# setting tsconfig$ node_modules/.bin/tsc --init-- tsconfig.jsonのexperimentalDecoratorsをtrueに設定 Class Decorator Example#123456789101112131415161718192021function hello(constructFn: Function) { console.log(constructFn);}function helloFactory(show: boolean) { if (show) { return hello; } else { return null; }}@helloFactory(false)class Person {}@helloFactory(true)class Person2 {}//--output//$ node dist/Test.js //[Function: Person2] 12345678910111213141516171819202122232425262728function editable(canBeEdit: boolean) { return function(target: any, propName: string, description: PropertyDescriptor) { console.log(canBeEdit); console.log(target); console.log(propName); console.log(description); description.writable = canBeEdit; }}class Person { constructor() { console.log('new Person()'); } @editable(true) hello() { console.log('hello'); }}const person = new Person();person.hello();person.hello = function() { console.log('world');}person.hello(); 12345678910111213141516171819function addHello(constructorFn: Function) { constructorFn.prototype.hello = function() { console.log('hello'); }}@addHelloclass Person { constructor() { console.log('new Person()'); }}const person = new Person();(&lt;any&gt;person).hello(); //使い方に短所があるが、ライブラリやフレームワークなどの開発にはいいパターンかも//--output//$ node dist/Test.js //hello Method Decorator Example#1234567891011121314151617181920212223242526272829303132333435363738394041424344454647function editable(canBeEdit: boolean) { return function(target: any, propName: string, description: PropertyDescriptor) { console.log(canBeEdit); console.log(target); console.log(propName); console.log(description); //descriptorのwritable属性がランタイム時に変わる description.writable = canBeEdit; }}class Person { constructor() { console.log('new Person()'); } @editable(true) hello() { console.log('hello'); }}const person = new Person();person.hello();// editableをtrueにしていたので、上書きされる。// ※ editableをfalseにした場合は上書きされない。person.hello = function() { console.log('world');}person.hello();// --output// true// Person {}// hello// {// value: [Function: hello],// writable: true,// enumerable: false,// configurable: true// }// new Person()// hello// world // ※上書きされた関数の結果。editableがfalseなら、結果は「hello」 Property Decorator#1234567891011121314151617181920212223242526function writable(canBeWrite: boolean) { return function(target: any, propName: string): any { console.log(canBeWrite); console.log(target); console.log(propName); return { writable: canBeWrite } }}class Person { @writable(false) name: string = 'Mark'; constructor() { console.log('new Person()'); }}const person = new Person();console.log(person.name);// --output//TypeError: Cannot assign to read only property 'name' of object '#&lt;Person&gt;'//※ writable(true)にすると、エラーなく動作する Parameter Decorator#123456789101112131415161718192021222324252627function printInfo(target: any, methodName: string, paramIndex: number) { console.log(target); console.log(methodName); console.log(paramIndex);}class Person { private _name: string; private _age: number; constructor(name: string, @printInfo age: number) { this._name = name; this._age = age; } hello(@printInfo message: string) { console.log(message); }}//-- output// Person { hello: [Function] }// hello// 0// [Function: Person]// undefined// 1 13. Type Inference# タイプを明示しなかった場合のタイプ推論規則 letは、基本データ・タイプで推論 constはリタラル・タイプで推論 objectタイプを使わないと、プロパティはletと同じように推論 const person = {name:’Mark’, age: 35} person =&gt; {name: string; age: number;}で推論される 大体は推論自体は簡単 単純な変数 structuring, destructuring array, 関数のリターンに対しては推論が難しい場合が多い ArrayのType Inference#123456789101112131415161718192021const array1 = []; // any[]const array2 = ['a', 'b', 'c']; // string[]const array3 = ['a', 1, false]; // (string|number|boolean)[] ※ inferenced as union typeclass Animal { name: string;}class Dog extends Animal { dog: string;}class Cat extends Animal { cat: string;}const array4 = [new Dog(), new Cat()];// (Dog | Cat)[] returnのType Inference#123456789function hello(message: string | number) { if (message === 'world') { return 'world'; } else { return 0; }}// return type inference =&gt; ('world' | 0)// literal union Union TypeとType Guard#123456789101112131415161718192021222324252627interface Person { name: string; age: number;}interface Car { brand: string; wheel: number;}//Type Guard//tell this is Person when returnfunction isPerson(arg: any): arg is Person { return arg.name !== undefined;}function hello(arg: Person | Car) { if (isPerson(arg)) { //this is Person. not Car. console.log(arg.name); // console.log(arg.brand); //error } else { //this is Not Person. so this is Car. // console.log(arg.name); //error console.log(arg.brand); }}","link":"/2020/07/26/Typescript%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%AE%E9%80%9F%E6%88%90%E3%81%BE%E3%81%A8%E3%82%81/"}],"tags":[{"name":"engineer","slug":"engineer","link":"/tags/engineer/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"git pages","slug":"git-pages","link":"/tags/git-pages/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"docker-compose","slug":"docker-compose","link":"/tags/docker-compose/"},{"name":"lamp","slug":"lamp","link":"/tags/lamp/"},{"name":"html","slug":"html","link":"/tags/html/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"typescript","slug":"typescript","link":"/tags/typescript/"}],"categories":[{"name":"engineer life","slug":"engineer-life","link":"/categories/engineer-life/"},{"name":"docker","slug":"docker","link":"/categories/docker/"},{"name":"tools","slug":"tools","link":"/categories/tools/"},{"name":"front-end-markup","slug":"front-end-markup","link":"/categories/front-end-markup/"},{"name":"javascript","slug":"javascript","link":"/categories/javascript/"},{"name":"typescript","slug":"javascript/typescript","link":"/categories/javascript/typescript/"}]}